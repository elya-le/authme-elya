import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import './CreateEventForm.css';

const CreateEventForm = () => {
  const { groupId } = useParams();
  const navigate = useNavigate();

  const [image, setImage] = useState(null); // Changed from imageUrl

  const [errors, setErrors] = useState({});
  const [csrfToken, setCsrfToken] = useState('');
  const [formIncomplete, setFormIncomplete] = useState(false);
  const [groupName, setGroupName] = useState('');

  useEffect(() => {
    fetch('/api/csrf/restore', {
      method: 'GET',
      credentials: 'include',
    })
      .then((response) => response.json())
      .then((data) => {
        setCsrfToken(data['XSRF-Token']);
      })
      .catch((error) => {
        console.error('Error fetching CSRF token:', error);
      });

    fetch(`/api/groups/${groupId}`)
      .then((response) => response.json())
      .then((data) => {
        if (data.name) {
          setGroupName(data.name);
        }
      })
      .catch((error) => {
        console.error('Error fetching group details:', error);
      });

    return () => {
      setImage(null); 
      setErrors({});
      setFormIncomplete(false);
    };
  }, [groupId]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setErrors({});
    setFormIncomplete(false);

    const newErrors = {};

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      setFormIncomplete(true);
      return;
    }

    try {
      let newVenueId = venueId;

      let imageUrl = '';
      if (image) {
        const formData = new FormData();
        formData.append('image', image);

        const imageResponse = await fetch(`/api/uploads`, {
          method: 'POST',
          headers: {
            'CSRF-Token': csrfToken,
          },
          body: formData,
        });

        if (imageResponse.ok) {
          const imageData = await imageResponse.json();
          imageUrl = imageData.url;
        } else {
          const imageErrorData = await imageResponse.json();
          setErrors((prevErrors) => ({ ...prevErrors, image: imageErrorData.errors.url }));
          return;
        }
      }

      const eventResponse = await fetch(`/api/groups/${groupId}/events`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'CSRF-Token': csrfToken,
        },
        body: JSON.stringify({
          name,
          type,
          private: isPrivate === 'true',
          price: parseInt(price, 10),
          capacity: parseInt(capacity, 10),
          startDate,
          endDate,
          imageUrl,
          description,
          venueId: type === 'In person' ? newVenueId : null,
        }),
      });

      if (eventResponse.ok) {
        const eventData = await eventResponse.json();
        navigate(`/events/${eventData.id}`);
      } else {
        const eventErrorData = await eventResponse.json();
        const formattedErrors = {};
        if (eventErrorData.errors) {
          for (const key in eventErrorData.errors) {
            formattedErrors[key] = eventErrorData.errors[key].msg;
          }
        } else {
          formattedErrors.message = eventErrorData.message;
        }
        setErrors(formattedErrors);
      }
    } catch (error) {
      setErrors({ message: 'Network or server error: ' + error.message });
    }
  };

  return (
    <div className='form-container'>
      <form onSubmit={handleSubmit}>
      
        <div className='section-create-event'>
          <label>Please add an image for your event below:</label><br />
          {errors.image && <p className='field-error'>{errors.image}</p>}
          <input
            type='file'
            onChange={(e) => setImage(e.target.files[0])}
          />
        </div>
      
        <div className='section-create-event-submit'>
          <hr />
          {formIncomplete && (
            <div className='form-incomplete-error'>
              <p>Incomplete form - see requirements above</p>
            </div>
          )}
          <button
            type='submit'
            className={`create-event-button ${!name || !type || !isPrivate || !price || !capacity || !startDate || !endDate || !description || description.length < 30 || description.length > 2000 || (type === 'In person' && (!venueAddress || !venueCity || !venueState)) ? 'grey' : ''}`}
          >
            Create Event
          </button>
        </div>
        {errors.message && <p className='field-error'>{errors.message}</p>}
        {errors && Object.keys(errors).map((key, idx) => (
          <p key={idx} className='field-error'>{errors[key]}</p>
        ))}
      </form>
    </div>
  );
};

export default CreateEventForm;
